## 一、技术架构详细方案

### 1. 数据采集层优化

# 推荐：初期用SerpAPI，规模化后用Oxylabs
```

**SerpAPI实现示例**：

```python
import serpapi
from typing import List, Dict
import asyncio

class AmazonScraper:
    def __init__(self, api_key: str):
        self.client = serpapi.Client(api_key=api_key)
    
    async def search_products(self, keyword: str, marketplace: str = 'amazon.de'):
        params = {
            "engine": "amazon",
            "amazon_domain": "amazon.de",
            "q": keyword,
            "page": 1,
            "api_key": self.api_key
        }
        
        results = await self.client.search(params)
        
        # 提取前10个自然结果
        products = []
        for item in results.get('organic_results', [])[:10]:
            product = {
                'asin': item.get('asin'),
                'title': item.get('title'),
                'price': item.get('price', {}).get('value'),
                'rating': item.get('rating'),
                'reviews': item.get('reviews'),
                'brand': item.get('brand', ''),
                'image': item.get('thumbnail'),
                'is_prime': item.get('is_prime', False),
                'position': item.get('position')
            }
            products.append(product)
        
        return products

    async def get_product_details(self, asin: str):
        """获取产品详情页补充信息"""
        params = {
            "engine": "amazon_product",
            "amazon_domain": "amazon.de",
            "asin": asin,
            "api_key": self.api_key
        }
        
        result = await self.client.search(params)
        
        return {
            'asin': asin,
            'bullet_points': result.get('bullets', []),
            'feature_bullets': result.get('feature_bullets', []),
            'attributes': result.get('attributes', {}),
            'categories': result.get('categories', []),
            'bsr': result.get('bestsellers_rank', []),
            'variations': result.get('variations', {})
        }
```

### 2. AI分析层增强

**优化的Prompt设计**：

```python
class AIAnalyzer:
    def __init__(self, openai_key: str):
        self.client = OpenAI(api_key=openai_key)
    
    def analyze_listings(self, products: List[Dict]) -> Dict:
        prompt = f"""
        分析以下Amazon搜索结果Top 10产品，识别COSMO算法下的竞争格局：

        产品数据：
        {json.dumps(products, ensure_ascii=False, indent=2)}

        请进行以下分析：

        1. **场景定位分析**
           - 识别每个产品的主要使用场景
           - 统计场景出现频率
           - 找出"场景专注型"vs"通用型"产品

        2. **COSMO优化程度评估**
           - 标题长度利用率(字符数/300)
           - 场景词密度
           - 功能标签完整度
           - 长尾词植入情况

        3. **关键词策略分析**
           - 高频核心词(出现5次以上)
           - 差异化长尾词(仅1-2个产品使用)
           - 场景关联词
           - 痛点解决词

        4. **价格与定位矩阵**
           - 价格区间分布
           - 每个价格段的主打卖点
           - 品牌定位差异

        5. **创新机会识别**
           - 未被充分覆盖的场景
           - 缺失的功能组合
           - 潜在的差异化方向

        输出格式：
        {
            "场景分析": {...},
            "COSMO优化度": {...},
            "关键词机会": {...},
            "定位建议": {...},
            "创新方向": [...]
        }
        """
        
        response = self.client.chat.completions.create(
            model="gpt-4-turbo-preview",
            messages=[{"role": "user", "content": prompt}],
            temperature=0.7,
            stream=True  # 流式返回
        )
        
        return response
```

### 3. 后端架构（FastAPI + WebSocket）

```python
from fastapi import FastAPI, WebSocket
from fastapi.middleware.cors import CORSMiddleware
import asyncio
from typing import List

app = FastAPI()

# WebSocket连接管理
class ConnectionManager:
    def __init__(self):
        self.active_connections: List[WebSocket] = []
    
    async def connect(self, websocket: WebSocket):
        await websocket.accept()
        self.active_connections.append(websocket)
    
    async def broadcast(self, message: dict):
        for connection in self.active_connections:
            await connection.send_json(message)

manager = ConnectionManager()

@app.websocket("/ws")
async def websocket_endpoint(websocket: WebSocket):
    await manager.connect(websocket)
    try:
        while True:
            await websocket.receive_text()
    except:
        manager.disconnect(websocket)

@app.post("/analyze")
async def analyze_keyword(keyword: str):
    """主分析流程"""
    # 1. 爬取搜索结果
    scraper = AmazonScraper(SERPAPI_KEY)
    products = await scraper.search_products(keyword)
    
    # 2. 实时推送搜索结果
    await manager.broadcast({
        "type": "search_results",
        "data": products
    })
    
    # 3. 爬取详情页
    details = []
    for product in products:
        detail = await scraper.get_product_details(product['asin'])
        details.append(detail)
        
        # 实时推送详情
        await manager.broadcast({
            "type": "product_detail",
            "data": detail
        })
    
    # 4. AI分析
    analyzer = AIAnalyzer(OPENAI_KEY)
    analysis_stream = analyzer.analyze_listings(products + details)
    
    # 5. 流式推送AI分析结果
    async for chunk in analysis_stream:
        await manager.broadcast({
            "type": "ai_analysis",
            "data": chunk
        })
```

### 4. 前端实现（React + TypeScript）

```tsx
// components/AnalysisDashboard.tsx
import React, { useState, useEffect } from 'react';
import { Card, Tag, Progress, Statistic } from 'antd';
import ReactECharts from 'echarts-for-react';
import { motion, AnimatePresence } from 'framer-motion';

const AnalysisDashboard: React.FC = () => {
    const [products, setProducts] = useState<Product[]>([]);
    const [analysis, setAnalysis] = useState<Analysis | null>(null);
    const [ws, setWs] = useState<WebSocket | null>(null);

    useEffect(() => {
        const websocket = new WebSocket('ws://localhost:8000/ws');
        
        websocket.onmessage = (event) => {
            const data = JSON.parse(event.data);
            
            switch(data.type) {
                case 'search_results':
                    setProducts(data.data);
                    break;
                case 'ai_analysis':
                    setAnalysis(prev => ({
                        ...prev,
                        ...data.data
                    }));
                    break;
            }
        };
        
        setWs(websocket);
        return () => websocket.close();
    }, []);

    // 产品卡片流式展示
    const ProductCards = () => (
        <AnimatePresence>
            {products.map((product, index) => (
                <motion.div
                    key={product.asin}
                    initial={{ opacity: 0, x: -50 }}
                    animate={{ opacity: 1, x: 0 }}
                    transition={{ delay: index * 0.1 }}
                >
                    <Card
                        hoverable
                        cover={<img src={product.image} />}
                        className="product-card"
                    >
                        <Card.Meta
                            title={product.title.substring(0, 50) + '...'}
                            description={
                                <>
                                    <Tag color="blue">{product.brand}</Tag>
                                    <Tag color="green">€{product.price}</Tag>
                                    <Tag color="gold">⭐ {product.rating}</Tag>
                                </>
                            }
                        />
                    </Card>
                </motion.div>
            ))}
        </AnimatePresence>
    );

    // 关键词云
    const KeywordCloud = () => {
        if (!analysis?.keywords) return null;
        
        const wordCloudOption = {
            series: [{
                type: 'wordCloud',
                data: analysis.keywords.map(kw => ({
                    name: kw.word,
                    value: kw.frequency
                })),
                textStyle: {
                    color: () => {
                        return 'rgb(' + [
                            Math.round(Math.random() * 160),
                            Math.round(Math.random() * 160),
                            Math.round(Math.random() * 160)
                        ].join(',') + ')';
                    }
                }
            }]
        };
        
        return <ReactECharts option={wordCloudOption} />;
    };

    // COSMO优化度雷达图
    const OptimizationRadar = () => {
        const radarOption = {
            radar: {
                indicator: [
                    { name: '标题长度利用', max: 100 },
                    { name: '场景词密度', max: 100 },
                    { name: '功能标签', max: 100 },
                    { name: '长尾词覆盖', max: 100 },
                    { name: '痛点明确度', max: 100 }
                ]
            },
            series: [{
                type: 'radar',
                data: analysis?.optimization_scores || []
            }]
        };
        
        return <ReactECharts option={radarOption} />;
    };

    return (
        <div className="analysis-dashboard">
            <Row gutter={16}>
                <Col span={12}>
                    <h2>搜索结果</h2>
                    <ProductCards />
                </Col>
                <Col span={12}>
                    <Tabs defaultActiveKey="1">
                        <TabPane tab="关键词分析" key="1">
                            <KeywordCloud />
                        </TabPane>
                        <TabPane tab="COSMO优化度" key="2">
                            <OptimizationRadar />
                        </TabPane>
                        <TabPane tab="价格分布" key="3">
                            <PriceDistribution />
                        </TabPane>
                    </Tabs>
                </Col>
            </Row>
        </div>
    );
};
```

### 5. 数据库设计（PostgreSQL）

```sql
-- 搜索任务表
CREATE TABLE search_tasks (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    keyword VARCHAR(255) NOT NULL,
    marketplace VARCHAR(10) DEFAULT 'de',
    status VARCHAR(20) DEFAULT 'pending',
    created_at TIMESTAMP DEFAULT NOW()
);

-- 产品数据表
CREATE TABLE products (
    asin VARCHAR(20) PRIMARY KEY,
    task_id UUID REFERENCES search_tasks(id),
    title TEXT,
    brand VARCHAR(100),
    price DECIMAL(10,2),
    rating DECIMAL(3,2),
    reviews INTEGER,
    position INTEGER,
    scraped_at TIMESTAMP DEFAULT NOW()
);

-- AI分析结果表
CREATE TABLE ai_analysis (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    task_id UUID REFERENCES search_tasks(id),
    analysis_type VARCHAR(50),
    result JSONB,
    created_at TIMESTAMP DEFAULT NOW()
);
```

### 6. 部署建议

```yaml
# docker-compose.yml
version: '3.8'
services:
  backend:
    build: ./backend
    ports:
      - "8000:8000"
    environment:
      - SERPAPI_KEY=${SERPAPI_KEY}
      - OPENAI_KEY=${OPENAI_KEY}
    depends_on:
      - postgres
      - redis
  
  frontend:
    build: ./frontend
    ports:
      - "3000:3000"
  
  postgres:
    image: postgres:14
    environment:
      - POSTGRES_DB=amazon_analyzer
  
  redis:
    image: redis:7
    ports:
      - "6379:6379"
```

初期我觉得可以不对接数据库，数据保存在本地用文件形式保存和读取比较好。实现输入关键词到采集数据+ai分析的全过程项目。
